/**
 ******************************************************************************
 * @file    main.c
 * @author  Auto-generated by STM32CubeIDE
 * @version V1.0
 * @brief   Default main function.
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning                                                                       \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "../../ucpp/register.hpp"
#include "../../ucpp/stm32/gpio.hpp"
#include "../../ucpp/stm32/rcc.hpp"
#include "../../ucpp/stm32/stm32f7.hpp"

using namespace ucpp;
using namespace ucpp::stm32;
using namespace ucpp::gpio;
// LED on PB8

inline void wait(int delay) {
  for (volatile int i=delay; i; i--)
    ;
}

template <typename duty_cycle_fn_t, typename set_led_state_fn_t>
inline void pwm_loop(const duty_cycle_fn_t &get_duty_cycle,
                     const set_led_state_fn_t &set_led,
                     int period = 1024 * 1024 * 2) {
  int loop_counter = 0;
  while (1) {
    auto duty_cycle = get_duty_cycle(loop_counter);
    for (int i = 0; i < 4; i++) {
      volatile int high = (period * duty_cycle) / 100;
      volatile int low = period - high;
      set_led(0);
      wait(low);
      set_led(1);
      wait(high);
      loop_counter++;
    }
  }
}

int main(void) {
  rcc::enable_clock(stm32f7, stm32f7.GPIOB);
  set_direction(stm32f7, GPIOB8, stm32::gpio::mode::output);
  for (;;) {
    pwm_loop([](int v) { return v % 100; },
             [](bool state) { stm32f7.GPIOB.od.get<8>() = state; }, 1024 * 16);
  }
}




