/**
 ******************************************************************************
 * @file    main.c
 * @author  Auto-generated by STM32CubeIDE
 * @version V1.0
 * @brief   Default main function.
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning                                                                                           \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "../../ucpp/register.hpp"
#include "../../ucpp/stm32/gpio.hpp"
#include "../../ucpp/stm32/rcc.hpp"
#include "../../ucpp/stm32/stm32f7.hpp"
#include "../../ucpp/strong_types.hpp"
#include <iostream>
volatile int card_detect;
using namespace ucpp::stm32;

// SDMMC_D0 (PC8)  AF12
// SDMMC_D1 (PC9)  AF12
// SDMMC_D2 (PC10) AF12
// SDMMC_D3 (PC11) AF12
// SDMMC_CK (PC12) AF12
// SDMMC_CMD (PD2) AF12

template <typename gpio_t, int I>
inline void _setup_sd_io(gpio_t& gpio)
{
    using namespace gpio;
    alternate_function_field<I>(gpio) = alternate_function::af12;
    mode_field<I>(gpio) = mode::alternate_function;
    speed_field<I>(gpio) = gpio::speed::very_high;
}

template <typename gpio_t, int... I>
inline void setup_sd_all_io(gpio_t& gpio)
{
    (_setup_sd_io<gpio_t, I>(gpio), ...);
}

inline void setup_sd_io()
{
    setup_sd_all_io<decltype(stm32f7.GPIOC), 8, 9, 10, 11, 12>(stm32f7.GPIOC);
    setup_sd_all_io<decltype(stm32f7.GPIOD), 2>(stm32f7.GPIOD);
    rcc::enable_clock(stm32f7.rcc, stm32f7.sdmmc);
    stm32f7.sdmmc.CLKCR.CLKDIV = 40;
    stm32f7.sdmmc.CLKCR.WIDBUS = 1;
    stm32f7.sdmmc.POWER.PWRCTRL = 3;
}

inline void send_cmd(int cmd, int argument = 0)
{
    // sdmmc_cmdinit.Argument         = 0;
    // sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
    // sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
    // sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
    // sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
    // set arg
    stm32f7.sdmmc.ARG = argument;
    // set CMD
    stm32f7.sdmmc.CMD.CPSMEN = 1;
    stm32f7.sdmmc.CMD.WAITRESP = 1;
    stm32f7.sdmmc.CMD.CMDINDEX = cmd;
}

int main(void)
{
    /* ==========================================================================
     *         Old style struct mapping for debug (gdb sugar)
       ==========================================================================*/
    volatile rcc::RCC_c_t* rcc = (rcc::RCC_c_t*)(stm32f7.rcc.address);
    volatile gpio::gpio_c_t* gpioc = (gpio::gpio_c_t*)(stm32f7.GPIOC.address);
    volatile gpio::gpio_c_t* gpioi = (gpio::gpio_c_t*)(stm32f7.GPIOI.address);
    volatile sdmmc::sdmmc_c_t* sdmmc1 = (sdmmc::sdmmc_c_t*)(stm32f7.sdmmc.address);
    // ===========================================================================
    rcc::enable_clock(stm32f7.rcc, stm32f7.GPIOI);
    rcc::enable_clock(stm32f7.rcc, stm32f7.GPIOC);
    rcc::enable_clock(stm32f7.rcc, stm32f7.GPIOD);
    rcc::enable_clock(stm32f7.rcc, stm32f7.GPIOK);
    setup_sd_io();

    // GPIO K3 = LCD backlight ctrl
    gpio::mode_field<3>(stm32f7.GPIOK) = gpio::mode::output;
    stm32f7.GPIOK.output_typer.get<3>() = gpio::output_type::open_drain;
    stm32f7.GPIOK.speedr.get<3>() = gpio::speed::very_high;
    send_cmd(2, 0);

    for (;;)
    {
        card_detect = stm32f7.GPIOC.id.get<13>();
        stm32f7.GPIOK.od.get<3>() = stm32f7.GPIOC.id.get<13>();
        int v = stm32f7.GPIOK.id; // check that int() is working
        stm32f7.GPIOK.od = 10;
    }
}
